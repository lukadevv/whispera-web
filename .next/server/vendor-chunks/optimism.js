"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/optimism";
exports.ids = ["vendor-chunks/optimism"];
exports.modules = {

/***/ "(ssr)/./node_modules/optimism/lib/context.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/context.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Slot: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot),\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.bind),\n/* harmony export */   noContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.noContext),\n/* harmony export */   nonReactive: () => (/* binding */ nonReactive),\n/* harmony export */   parentEntrySlot: () => (/* binding */ parentEntrySlot),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.setTimeout)\n/* harmony export */ });\n/* harmony import */ var _wry_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/context */ \"(ssr)/./node_modules/@wry/context/lib/index.js\");\n\nconst parentEntrySlot = new _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot();\nfunction nonReactive(fn) {\n    return parentEntrySlot.withValue(void 0, fn);\n}\n\n\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2NvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBb0M7QUFDN0IsNEJBQTRCLDhDQUFJO0FBQ2hDO0FBQ1A7QUFDQTtBQUNnQjtBQUN5RTtBQUN6RiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvY29udGV4dC5qcz83MmI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsb3QgfSBmcm9tIFwiQHdyeS9jb250ZXh0XCI7XG5leHBvcnQgY29uc3QgcGFyZW50RW50cnlTbG90ID0gbmV3IFNsb3QoKTtcbmV4cG9ydCBmdW5jdGlvbiBub25SZWFjdGl2ZShmbikge1xuICAgIHJldHVybiBwYXJlbnRFbnRyeVNsb3Qud2l0aFZhbHVlKHZvaWQgMCwgZm4pO1xufVxuZXhwb3J0IHsgU2xvdCB9O1xuZXhwb3J0IHsgYmluZCBhcyBiaW5kQ29udGV4dCwgbm9Db250ZXh0LCBzZXRUaW1lb3V0LCBhc3luY0Zyb21HZW4sIH0gZnJvbSBcIkB3cnkvY29udGV4dFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/dep.js":
/*!******************************************!*\
  !*** ./node_modules/optimism/lib/dep.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dep: () => (/* binding */ dep)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst EntryMethods = {\n    setDirty: true,\n    dispose: true,\n    forget: true, // Fully remove parent Entry from LRU cache and computation graph\n};\nfunction dep(options) {\n    const depsByKey = new Map();\n    const subscribe = options && options.subscribe;\n    function depend(key) {\n        const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n        if (parent) {\n            let dep = depsByKey.get(key);\n            if (!dep) {\n                depsByKey.set(key, dep = new Set);\n            }\n            parent.dependOn(dep);\n            if (typeof subscribe === \"function\") {\n                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n                dep.unsubscribe = subscribe(key);\n            }\n        }\n    }\n    depend.dirty = function dirty(key, entryMethodName) {\n        const dep = depsByKey.get(key);\n        if (dep) {\n            const m = (entryMethodName &&\n                _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty.call(EntryMethods, entryMethodName)) ? entryMethodName : \"setDirty\";\n            // We have to use arrayFromSet(dep).forEach instead of dep.forEach,\n            // because modifying a Set while iterating over it can cause elements in\n            // the Set to be removed from the Set before they've been iterated over.\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(dep).forEach(entry => entry[m]());\n            depsByKey.delete(key);\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);\n        }\n    };\n    return depend;\n}\n//# sourceMappingURL=dep.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2RlcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDZ0M7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdEQUFlO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDZEQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHVEQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQVk7QUFDeEI7QUFDQSxZQUFZLDZEQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL2xpYi9kZXAuanM/MDk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJlbnRFbnRyeVNsb3QgfSBmcm9tIFwiLi9jb250ZXh0LmpzXCI7XG5pbXBvcnQgeyBoYXNPd25Qcm9wZXJ0eSwgbWF5YmVVbnN1YnNjcmliZSwgYXJyYXlGcm9tU2V0LCB9IGZyb20gXCIuL2hlbHBlcnMuanNcIjtcbmNvbnN0IEVudHJ5TWV0aG9kcyA9IHtcbiAgICBzZXREaXJ0eTogdHJ1ZSxcbiAgICBkaXNwb3NlOiB0cnVlLFxuICAgIGZvcmdldDogdHJ1ZSwgLy8gRnVsbHkgcmVtb3ZlIHBhcmVudCBFbnRyeSBmcm9tIExSVSBjYWNoZSBhbmQgY29tcHV0YXRpb24gZ3JhcGhcbn07XG5leHBvcnQgZnVuY3Rpb24gZGVwKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZXBzQnlLZXkgPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlID0gb3B0aW9ucyAmJiBvcHRpb25zLnN1YnNjcmliZTtcbiAgICBmdW5jdGlvbiBkZXBlbmQoa2V5KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHBhcmVudEVudHJ5U2xvdC5nZXRWYWx1ZSgpO1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBsZXQgZGVwID0gZGVwc0J5S2V5LmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKCFkZXApIHtcbiAgICAgICAgICAgICAgICBkZXBzQnlLZXkuc2V0KGtleSwgZGVwID0gbmV3IFNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQuZGVwZW5kT24oZGVwKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBtYXliZVVuc3Vic2NyaWJlKGRlcCk7XG4gICAgICAgICAgICAgICAgZGVwLnVuc3Vic2NyaWJlID0gc3Vic2NyaWJlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVwZW5kLmRpcnR5ID0gZnVuY3Rpb24gZGlydHkoa2V5LCBlbnRyeU1ldGhvZE5hbWUpIHtcbiAgICAgICAgY29uc3QgZGVwID0gZGVwc0J5S2V5LmdldChrZXkpO1xuICAgICAgICBpZiAoZGVwKSB7XG4gICAgICAgICAgICBjb25zdCBtID0gKGVudHJ5TWV0aG9kTmFtZSAmJlxuICAgICAgICAgICAgICAgIGhhc093blByb3BlcnR5LmNhbGwoRW50cnlNZXRob2RzLCBlbnRyeU1ldGhvZE5hbWUpKSA/IGVudHJ5TWV0aG9kTmFtZSA6IFwic2V0RGlydHlcIjtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gdXNlIGFycmF5RnJvbVNldChkZXApLmZvckVhY2ggaW5zdGVhZCBvZiBkZXAuZm9yRWFjaCxcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgbW9kaWZ5aW5nIGEgU2V0IHdoaWxlIGl0ZXJhdGluZyBvdmVyIGl0IGNhbiBjYXVzZSBlbGVtZW50cyBpblxuICAgICAgICAgICAgLy8gdGhlIFNldCB0byBiZSByZW1vdmVkIGZyb20gdGhlIFNldCBiZWZvcmUgdGhleSd2ZSBiZWVuIGl0ZXJhdGVkIG92ZXIuXG4gICAgICAgICAgICBhcnJheUZyb21TZXQoZGVwKS5mb3JFYWNoKGVudHJ5ID0+IGVudHJ5W21dKCkpO1xuICAgICAgICAgICAgZGVwc0J5S2V5LmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgbWF5YmVVbnN1YnNjcmliZShkZXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZGVwZW5kO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/dep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/entry.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/entry.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Entry: () => (/* binding */ Entry)\n/* harmony export */ });\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/optimism/lib/helpers.js\");\n\n\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n        // Both values must be ordinary (or both exceptional) to be equal.\n        len === b.length &&\n        // The underlying value or exception must be the same.\n        a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch (value.length) {\n        case 0: throw new Error(\"unknown value\");\n        case 1: return value[0];\n        case 2: throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nclass Entry {\n    constructor(fn) {\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this)\n            ? reallyRecompute(this, args)\n            : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty)\n            return;\n        this.dirty = true;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child) => {\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(this.deps).forEach(dep => dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        }\n        else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    const { normalizeResult } = entry;\n    let oldValueCopy;\n    if (normalizeResult && entry.value.length === 1) {\n        oldValueCopy = valueCopy(entry.value);\n    }\n    // Make entry.value an empty array, representing an unknown value.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n        // If we have a viable oldValueCopy to compare with the (successfully\n        // recomputed) new entry.value, and they are not already === identical, give\n        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n        // and/or entry.value[0] to determine the final cached entry.value.\n        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n            try {\n                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n            }\n            catch (_a) {\n                // If normalizeResult throws, just use the newer value, rather than\n                // saving the exception as entry.value[1].\n            }\n        }\n    }\n    catch (e) {\n        // If entry.fn throws, entry.value will hold that exception.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(child.parents);\n        for (let i = 0; i < parentCount; ++i) {\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    }\n    else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    }\n    else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child) => {\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        }\n        catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n}\n//# sourceMappingURL=entry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/entry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/optimism/lib/helpers.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayFromSet: () => (/* binding */ arrayFromSet),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   maybeUnsubscribe: () => (/* binding */ maybeUnsubscribe)\n/* harmony export */ });\nconst { hasOwnProperty, } = Object.prototype;\nconst arrayFromSet = Array.from ||\n    function (set) {\n        const array = [];\n        set.forEach(item => array.push(item));\n        return array;\n    };\nfunction maybeUnsubscribe(entryOrDep) {\n    const { unsubscribe } = entryOrDep;\n    if (typeof unsubscribe === \"function\") {\n        entryOrDep.unsubscribe = void 0;\n        unsubscribe();\n    }\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sUUFBUSxrQkFBa0I7QUFDMUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL2xpYi9oZWxwZXJzLmpzPzI1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHsgaGFzT3duUHJvcGVydHksIH0gPSBPYmplY3QucHJvdG90eXBlO1xuZXhwb3J0IGNvbnN0IGFycmF5RnJvbVNldCA9IEFycmF5LmZyb20gfHxcbiAgICBmdW5jdGlvbiAoc2V0KSB7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgICAgIHNldC5mb3JFYWNoKGl0ZW0gPT4gYXJyYXkucHVzaChpdGVtKSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlVW5zdWJzY3JpYmUoZW50cnlPckRlcCkge1xuICAgIGNvbnN0IHsgdW5zdWJzY3JpYmUgfSA9IGVudHJ5T3JEZXA7XG4gICAgaWYgKHR5cGVvZiB1bnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVudHJ5T3JEZXAudW5zdWJzY3JpYmUgPSB2b2lkIDA7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/optimism/lib/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyTrie: () => (/* reexport safe */ _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie),\n/* harmony export */   Slot: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.Slot),\n/* harmony export */   asyncFromGen: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.asyncFromGen),\n/* harmony export */   bindContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.bindContext),\n/* harmony export */   defaultMakeCacheKey: () => (/* binding */ defaultMakeCacheKey),\n/* harmony export */   dep: () => (/* reexport safe */ _dep_js__WEBPACK_IMPORTED_MODULE_3__.dep),\n/* harmony export */   noContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.noContext),\n/* harmony export */   nonReactive: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.nonReactive),\n/* harmony export */   setTimeout: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.setTimeout),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wry/trie */ \"(ssr)/./node_modules/optimism/node_modules/@wry/trie/lib/index.js\");\n/* harmony import */ var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @wry/caches */ \"(ssr)/./node_modules/@wry/caches/lib/strong.js\");\n/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entry.js */ \"(ssr)/./node_modules/optimism/lib/entry.js\");\n/* harmony import */ var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./context.js */ \"(ssr)/./node_modules/optimism/lib/context.js\");\n/* harmony import */ var _dep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dep.js */ \"(ssr)/./node_modules/optimism/lib/dep.js\");\n\n\n\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nfunction defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\n\n;\nconst caches = new Set();\nfunction wrap(originalFunction, { max = Math.pow(2, 16), keyArgs, makeCacheKey = defaultMakeCacheKey, normalizeResult, subscribe, cache: cacheOption = _wry_caches__WEBPACK_IMPORTED_MODULE_4__.StrongCache, } = Object.create(null)) {\n    const cache = typeof cacheOption === \"function\"\n        ? new cacheOption(max, entry => entry.dispose())\n        : cacheOption;\n    const optimistic = function () {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new _entry_js__WEBPACK_IMPORTED_MODULE_1__.Entry(originalFunction));\n            entry.normalizeResult = normalizeResult;\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = () => cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!_context_js__WEBPACK_IMPORTED_MODULE_2__.parentEntrySlot.hasValue()) {\n            caches.forEach(cache => cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get: () => cache.size,\n        configurable: false,\n        enumerable: false,\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        keyArgs,\n        makeCacheKey,\n        normalizeResult,\n        subscribe,\n        cache,\n    });\n    function dirtyKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return key ? cache.delete(key) : false;\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFpQztBQUNTO0FBQ1A7QUFDWTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0c7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AseURBQXlELDJDQUFJO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkI7QUFDM0I7QUFDQTtBQUNPLGtDQUFrQyxxSEFBcUgsb0RBQVcsSUFBSTtBQUM3SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0Q0FBSztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx3REFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcHRpbWlzbS9saWIvaW5kZXguanM/YjJkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmllIH0gZnJvbSBcIkB3cnkvdHJpZVwiO1xuaW1wb3J0IHsgU3Ryb25nQ2FjaGUgfSBmcm9tIFwiQHdyeS9jYWNoZXNcIjtcbmltcG9ydCB7IEVudHJ5IH0gZnJvbSBcIi4vZW50cnkuanNcIjtcbmltcG9ydCB7IHBhcmVudEVudHJ5U2xvdCB9IGZyb20gXCIuL2NvbnRleHQuanNcIjtcbi8vIFRoZXNlIGhlbHBlciBmdW5jdGlvbnMgYXJlIGltcG9ydGFudCBmb3IgbWFraW5nIG9wdGltaXNtIHdvcmsgd2l0aFxuLy8gYXN5bmNocm9ub3VzIGNvZGUuIEluIG9yZGVyIHRvIHJlZ2lzdGVyIHBhcmVudC1jaGlsZCBkZXBlbmRlbmNpZXMsXG4vLyBvcHRpbWlzbSBuZWVkcyB0byBrbm93IGFib3V0IGFueSBjdXJyZW50bHkgYWN0aXZlIHBhcmVudCBjb21wdXRhdGlvbnMuXG4vLyBJbiBvcmRpbmFyeSBzeW5jaHJvbm91cyBjb2RlLCB0aGUgcGFyZW50IGNvbnRleHQgaXMgaW1wbGljaXQgaW4gdGhlXG4vLyBleGVjdXRpb24gc3RhY2ssIGJ1dCBhc3luY2hyb25vdXMgY29kZSByZXF1aXJlcyBzb21lIGV4dHJhIGd1aWRhbmNlIGluXG4vLyBvcmRlciB0byBwcm9wYWdhdGUgY29udGV4dCBmcm9tIG9uZSBhc3luYyB0YXNrIHNlZ21lbnQgdG8gdGhlIG5leHQuXG5leHBvcnQgeyBiaW5kQ29udGV4dCwgbm9Db250ZXh0LCBub25SZWFjdGl2ZSwgc2V0VGltZW91dCwgYXN5bmNGcm9tR2VuLCBTbG90LCB9IGZyb20gXCIuL2NvbnRleHQuanNcIjtcbi8vIEEgbGlnaHRlci13ZWlnaHQgZGVwZW5kZW5jeSwgc2ltaWxhciB0byBPcHRpbWlzdGljV3JhcHBlckZ1bmN0aW9uLCBleGNlcHRcbi8vIHdpdGggb25seSBvbmUgYXJndW1lbnQsIG5vIG1ha2VDYWNoZUtleSwgbm8gd3JhcHBlZCBmdW5jdGlvbiB0byByZWNvbXB1dGUsXG4vLyBhbmQgbm8gcmVzdWx0IHZhbHVlLiBVc2VmdWwgZm9yIHJlcHJlc2VudGluZyBkZXBlbmRlbmN5IGxlYXZlcyBpbiB0aGUgZ3JhcGhcbi8vIG9mIGNvbXB1dGF0aW9uLiBTdWJzY3JpcHRpb25zIGFyZSBzdXBwb3J0ZWQuXG5leHBvcnQgeyBkZXAgfSBmcm9tIFwiLi9kZXAuanNcIjtcbi8vIFRoZSBkZWZhdWx0TWFrZUNhY2hlS2V5IGZ1bmN0aW9uIGlzIHJlbWFya2FibHkgcG93ZXJmdWwsIGJlY2F1c2UgaXQgZ2l2ZXNcbi8vIGEgdW5pcXVlIG9iamVjdCBmb3IgYW55IHNoYWxsb3ctaWRlbnRpY2FsIGxpc3Qgb2YgYXJndW1lbnRzLiBJZiB5b3UgbmVlZFxuLy8gdG8gaW1wbGVtZW50IGEgY3VzdG9tIG1ha2VDYWNoZUtleSBmdW5jdGlvbiwgeW91IG1heSBmaW5kIGl0IGhlbHBmdWwgdG9cbi8vIGRlbGVnYXRlIHRoZSBmaW5hbCB3b3JrIHRvIGRlZmF1bHRNYWtlQ2FjaGVLZXksIHdoaWNoIGlzIHdoeSB3ZSBleHBvcnQgaXRcbi8vIGhlcmUuIEhvd2V2ZXIsIHlvdSBtYXkgd2FudCB0byBhdm9pZCBkZWZhdWx0TWFrZUNhY2hlS2V5IGlmIHlvdXIgcnVudGltZVxuLy8gZG9lcyBub3Qgc3VwcG9ydCBXZWFrTWFwLCBvciB5b3UgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXR1cm4gYSBzdHJpbmcga2V5LlxuLy8gSW4gdGhvc2UgY2FzZXMsIGp1c3Qgd3JpdGUgeW91ciBvd24gY3VzdG9tIG1ha2VDYWNoZUtleSBmdW5jdGlvbnMuXG5sZXQgZGVmYXVsdEtleVRyaWU7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1ha2VDYWNoZUtleSguLi5hcmdzKSB7XG4gICAgY29uc3QgdHJpZSA9IGRlZmF1bHRLZXlUcmllIHx8IChkZWZhdWx0S2V5VHJpZSA9IG5ldyBUcmllKHR5cGVvZiBXZWFrTWFwID09PSBcImZ1bmN0aW9uXCIpKTtcbiAgICByZXR1cm4gdHJpZS5sb29rdXBBcnJheShhcmdzKTtcbn1cbi8vIElmIHlvdSdyZSBwYXJhbm9pZCBhYm91dCBtZW1vcnkgbGVha3MsIG9yIHlvdSB3YW50IHRvIGF2b2lkIHVzaW5nIFdlYWtNYXBcbi8vIHVuZGVyIHRoZSBob29kLCBidXQgeW91IHN0aWxsIG5lZWQgdGhlIGJlaGF2aW9yIG9mIGRlZmF1bHRNYWtlQ2FjaGVLZXksXG4vLyBpbXBvcnQgdGhpcyBjb25zdHJ1Y3RvciB0byBjcmVhdGUgeW91ciBvd24gdHJpZXMuXG5leHBvcnQgeyBUcmllIGFzIEtleVRyaWUgfTtcbjtcbmNvbnN0IGNhY2hlcyA9IG5ldyBTZXQoKTtcbmV4cG9ydCBmdW5jdGlvbiB3cmFwKG9yaWdpbmFsRnVuY3Rpb24sIHsgbWF4ID0gTWF0aC5wb3coMiwgMTYpLCBrZXlBcmdzLCBtYWtlQ2FjaGVLZXkgPSBkZWZhdWx0TWFrZUNhY2hlS2V5LCBub3JtYWxpemVSZXN1bHQsIHN1YnNjcmliZSwgY2FjaGU6IGNhY2hlT3B0aW9uID0gU3Ryb25nQ2FjaGUsIH0gPSBPYmplY3QuY3JlYXRlKG51bGwpKSB7XG4gICAgY29uc3QgY2FjaGUgPSB0eXBlb2YgY2FjaGVPcHRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IG5ldyBjYWNoZU9wdGlvbihtYXgsIGVudHJ5ID0+IGVudHJ5LmRpc3Bvc2UoKSlcbiAgICAgICAgOiBjYWNoZU9wdGlvbjtcbiAgICBjb25zdCBvcHRpbWlzdGljID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBrZXkgPSBtYWtlQ2FjaGVLZXkuYXBwbHkobnVsbCwga2V5QXJncyA/IGtleUFyZ3MuYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChrZXkgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW50cnkgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGtleSwgZW50cnkgPSBuZXcgRW50cnkob3JpZ2luYWxGdW5jdGlvbikpO1xuICAgICAgICAgICAgZW50cnkubm9ybWFsaXplUmVzdWx0ID0gbm9ybWFsaXplUmVzdWx0O1xuICAgICAgICAgICAgZW50cnkuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICAgICAgLy8gR2l2ZSB0aGUgRW50cnkgdGhlIGFiaWxpdHkgdG8gdHJpZ2dlciBjYWNoZS5kZWxldGUoa2V5KSwgZXZlbiB0aG91Z2hcbiAgICAgICAgICAgIC8vIHRoZSBFbnRyeSBpdHNlbGYgZG9lcyBub3Qga25vdyBhYm91dCBrZXkgb3IgY2FjaGUuXG4gICAgICAgICAgICBlbnRyeS5mb3JnZXQgPSAoKSA9PiBjYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudHJ5LnJlY29tcHV0ZShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgICAgLy8gTW92ZSB0aGlzIGVudHJ5IHRvIHRoZSBmcm9udCBvZiB0aGUgbGVhc3QtcmVjZW50bHkgdXNlZCBxdWV1ZSxcbiAgICAgICAgLy8gc2luY2Ugd2UganVzdCBmaW5pc2hlZCBjb21wdXRpbmcgaXRzIHZhbHVlLlxuICAgICAgICBjYWNoZS5zZXQoa2V5LCBlbnRyeSk7XG4gICAgICAgIGNhY2hlcy5hZGQoY2FjaGUpO1xuICAgICAgICAvLyBDbGVhbiB1cCBhbnkgZXhjZXNzIGVudHJpZXMgaW4gdGhlIGNhY2hlLCBidXQgb25seSBpZiB0aGVyZSBpcyBub1xuICAgICAgICAvLyBhY3RpdmUgcGFyZW50IGVudHJ5LCBtZWFuaW5nIHdlJ3JlIG5vdCBpbiB0aGUgbWlkZGxlIG9mIGEgbGFyZ2VyXG4gICAgICAgIC8vIGNvbXB1dGF0aW9uIHRoYXQgbWlnaHQgYmUgZmx1bW1veGVkIGJ5IHRoZSBjbGVhbmluZy5cbiAgICAgICAgaWYgKCFwYXJlbnRFbnRyeVNsb3QuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgY2FjaGVzLmZvckVhY2goY2FjaGUgPT4gY2FjaGUuY2xlYW4oKSk7XG4gICAgICAgICAgICBjYWNoZXMuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW1pc3RpYywgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBjYWNoZS5zaXplLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgICBPYmplY3QuZnJlZXplKG9wdGltaXN0aWMub3B0aW9ucyA9IHtcbiAgICAgICAgbWF4LFxuICAgICAgICBrZXlBcmdzLFxuICAgICAgICBtYWtlQ2FjaGVLZXksXG4gICAgICAgIG5vcm1hbGl6ZVJlc3VsdCxcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgICAgICBjYWNoZSxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBkaXJ0eUtleShrZXkpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBrZXkgJiYgY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgZW50cnkuc2V0RGlydHkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcHRpbWlzdGljLmRpcnR5S2V5ID0gZGlydHlLZXk7XG4gICAgb3B0aW1pc3RpYy5kaXJ0eSA9IGZ1bmN0aW9uIGRpcnR5KCkge1xuICAgICAgICBkaXJ0eUtleShtYWtlQ2FjaGVLZXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBwZWVrS2V5KGtleSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGtleSAmJiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gZW50cnkucGVlaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wdGltaXN0aWMucGVla0tleSA9IHBlZWtLZXk7XG4gICAgb3B0aW1pc3RpYy5wZWVrID0gZnVuY3Rpb24gcGVlaygpIHtcbiAgICAgICAgcmV0dXJuIHBlZWtLZXkobWFrZUNhY2hlS2V5LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gZm9yZ2V0S2V5KGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8gY2FjaGUuZGVsZXRlKGtleSkgOiBmYWxzZTtcbiAgICB9XG4gICAgb3B0aW1pc3RpYy5mb3JnZXRLZXkgPSBmb3JnZXRLZXk7XG4gICAgb3B0aW1pc3RpYy5mb3JnZXQgPSBmdW5jdGlvbiBmb3JnZXQoKSB7XG4gICAgICAgIHJldHVybiBmb3JnZXRLZXkobWFrZUNhY2hlS2V5LmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gICAgb3B0aW1pc3RpYy5tYWtlQ2FjaGVLZXkgPSBtYWtlQ2FjaGVLZXk7XG4gICAgb3B0aW1pc3RpYy5nZXRLZXkgPSBrZXlBcmdzID8gZnVuY3Rpb24gZ2V0S2V5KCkge1xuICAgICAgICByZXR1cm4gbWFrZUNhY2hlS2V5LmFwcGx5KG51bGwsIGtleUFyZ3MuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgfSA6IG1ha2VDYWNoZUtleTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvcHRpbWlzdGljKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/optimism/node_modules/@wry/trie/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/optimism/node_modules/@wry/trie/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Trie: () => (/* binding */ Trie)\n/* harmony export */ });\n// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\nconst { hasOwnProperty } = Object.prototype;\nclass Trie {\n    constructor(weakness = true, makeData = defaultMakeData) {\n        this.weakness = weakness;\n        this.makeData = makeData;\n    }\n    lookup(...array) {\n        return this.lookupArray(array);\n    }\n    lookupArray(array) {\n        let node = this;\n        forEach.call(array, key => node = node.getChildTrie(key));\n        return hasOwnProperty.call(node, \"data\")\n            ? node.data\n            : node.data = this.makeData(slice.call(array));\n    }\n    peek(...array) {\n        return this.peekArray(array);\n    }\n    peekArray(array) {\n        let node = this;\n        for (let i = 0, len = array.length; node && i < len; ++i) {\n            const map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n            node = map && map.get(array[i]);\n        }\n        return node && node.data;\n    }\n    getChildTrie(key) {\n        const map = this.weakness && isObjRef(key)\n            ? this.weak || (this.weak = new WeakMap())\n            : this.strong || (this.strong = new Map());\n        let child = map.get(key);\n        if (!child)\n            map.set(key, child = new Trie(this.weakness, this.makeData));\n        return child;\n    }\n}\nfunction isObjRef(value) {\n    switch (typeof value) {\n        case \"object\":\n            if (value === null)\n                break;\n        // Fall through to return true...\n        case \"function\":\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3B0aW1pc20vbm9kZV9tb2R1bGVzL0B3cnkvdHJpZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpQkFBaUI7QUFDekIsUUFBUSxpQkFBaUI7QUFDbEI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpQkFBaUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wdGltaXNtL25vZGVfbW9kdWxlcy9Ad3J5L3RyaWUvbGliL2luZGV4LmpzPzNmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQSBbdHJpZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJpZSkgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBob2xkc1xuLy8gb2JqZWN0IGtleXMgd2Vha2x5LCB5ZXQgY2FuIGFsc28gaG9sZCBub24tb2JqZWN0IGtleXMsIHVubGlrZSB0aGVcbi8vIG5hdGl2ZSBgV2Vha01hcGAuXG4vLyBJZiBubyBtYWtlRGF0YSBmdW5jdGlvbiBpcyBzdXBwbGllZCwgdGhlIGxvb2tlZC11cCBkYXRhIHdpbGwgYmUgYW4gZW1wdHksXG4vLyBudWxsLXByb3RvdHlwZSBPYmplY3QuXG5jb25zdCBkZWZhdWx0TWFrZURhdGEgPSAoKSA9PiBPYmplY3QuY3JlYXRlKG51bGwpO1xuLy8gVXNlZnVsIGZvciBwcm9jZXNzaW5nIGFyZ3VtZW50cyBvYmplY3RzIGFzIHdlbGwgYXMgYXJyYXlzLlxuY29uc3QgeyBmb3JFYWNoLCBzbGljZSB9ID0gQXJyYXkucHJvdG90eXBlO1xuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmV4cG9ydCBjbGFzcyBUcmllIHtcbiAgICBjb25zdHJ1Y3Rvcih3ZWFrbmVzcyA9IHRydWUsIG1ha2VEYXRhID0gZGVmYXVsdE1ha2VEYXRhKSB7XG4gICAgICAgIHRoaXMud2Vha25lc3MgPSB3ZWFrbmVzcztcbiAgICAgICAgdGhpcy5tYWtlRGF0YSA9IG1ha2VEYXRhO1xuICAgIH1cbiAgICBsb29rdXAoLi4uYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9va3VwQXJyYXkoYXJyYXkpO1xuICAgIH1cbiAgICBsb29rdXBBcnJheShhcnJheSkge1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXM7XG4gICAgICAgIGZvckVhY2guY2FsbChhcnJheSwga2V5ID0+IG5vZGUgPSBub2RlLmdldENoaWxkVHJpZShrZXkpKTtcbiAgICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwobm9kZSwgXCJkYXRhXCIpXG4gICAgICAgICAgICA/IG5vZGUuZGF0YVxuICAgICAgICAgICAgOiBub2RlLmRhdGEgPSB0aGlzLm1ha2VEYXRhKHNsaWNlLmNhbGwoYXJyYXkpKTtcbiAgICB9XG4gICAgcGVlayguLi5hcnJheSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZWVrQXJyYXkoYXJyYXkpO1xuICAgIH1cbiAgICBwZWVrQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBub2RlICYmIGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy53ZWFrbmVzcyAmJiBpc09ialJlZihhcnJheVtpXSkgPyBub2RlLndlYWsgOiBub2RlLnN0cm9uZztcbiAgICAgICAgICAgIG5vZGUgPSBtYXAgJiYgbWFwLmdldChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5kYXRhO1xuICAgIH1cbiAgICBnZXRDaGlsZFRyaWUoa2V5KSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMud2Vha25lc3MgJiYgaXNPYmpSZWYoa2V5KVxuICAgICAgICAgICAgPyB0aGlzLndlYWsgfHwgKHRoaXMud2VhayA9IG5ldyBXZWFrTWFwKCkpXG4gICAgICAgICAgICA6IHRoaXMuc3Ryb25nIHx8ICh0aGlzLnN0cm9uZyA9IG5ldyBNYXAoKSk7XG4gICAgICAgIGxldCBjaGlsZCA9IG1hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFjaGlsZClcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBjaGlsZCA9IG5ldyBUcmllKHRoaXMud2Vha25lc3MsIHRoaXMubWFrZURhdGEpKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzT2JqUmVmKHZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBGYWxsIHRocm91Z2ggdG8gcmV0dXJuIHRydWUuLi5cbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/optimism/node_modules/@wry/trie/lib/index.js\n");

/***/ })

};
;